#Machine Learning Libs
from tensorflow import keras

#Other Libs
import numpy as np
import pandas as pd
import itertools


class BarkPreprocessing:

    def __init__(self, path, ds):
        """
        Initialize the Bark Preprocessing class.

        Parameters:

            path: Path to the dataset.

            ds: Dataframe with the image names in one column and labels in another.
        """

        self.path = path
        self.dataset = ds

    def make_train_validation_set(self):
        """
        Make a list of k train and validation sets where k is the number of folds specified when
        making the dataset.

        :return:
            train_sets (list): A list of DataFrames which have the images in the train_imgs column and labels in the
            train_labels column.

            val_sets (list): A list of DataFrames which have the images in the val_imgs column and labels in the
            val_labels column.
        """

        folds = self.dataset[1]
        data = self.dataset[0]

        train_sets = []
        val_sets = []
        for i in range(1, folds+1):

            train_df = pd.DataFrame(columns=['train_imgs', 'train_labels'])
            val_df = pd.DataFrame(columns=['val_imgs', 'val_labels'])

            val_fold = ['fold {} labels'.format(i), 'fold {}'.format(i)]

            train_data = [data['fold {}'.format(i)].tolist() for j in range(1, folds+1)
                          if 'fold {}'.format(j) not in val_fold]
            train_labels = [data['fold {} labels'.format(i)].tolist() for j in range(1, folds+1)
                            if 'fold {} labels'.format(j) not in val_fold]

            val_data = data[val_fold[1]].tolist()
            val_labels = data[val_fold[0]].tolist()

            train_df['train_imgs'] = list(itertools.chain(*train_data))
            train_df['train_labels'] = list(itertools.chain(*train_labels))

            val_df['val_imgs'] = val_data
            val_df['val_labels'] = val_labels

            train_sets.append(train_df.astype('str'))
            val_sets.append(val_df.astype('str'))

        return train_sets, val_sets

    """Credit for these two functions: https://jkjung-avt.github.io/keras-image-cropping/"""
    @staticmethod
    def random_crop(img, random_crop_size):
        """
        Randomly crops the image.

        :param
            img (NumPy Array): An image converted to a NumPy array with shape (width, height, channels).

            random_crop_size (int): Size to crop the image.

        :return:
           (NumPy Array) The cropped image as a NumPy array.
        """

        # Note: image_data_format is 'channel_last'
        assert img.shape[2] == 3

        height, width = img.shape[0], img.shape[1]
        dy, dx = random_crop_size
        x = np.random.randint(0, width - dx + 1)
        y = np.random.randint(0, height - dy + 1)

        return img[y:(y + dy), x:(x + dx), :]

    @staticmethod
    def crop_generator(batches, crop_length):
        """
        Take as input a Keras ImageGen (Iterator) and generate random
        crops from the image batches generated by the original iterator.

        :returns
            Yields batches of images which are cropped.
        """

        while True:
            batch_x, batch_y = next(batches)
            batch_crops = np.zeros((batch_x.shape[0], crop_length, crop_length, 3))
            for i in range(batch_x.shape[0]):
                batch_crops[i] = BarkPreprocessing.random_crop(batch_x[i], (crop_length, crop_length))
            yield batch_crops, batch_y

    def preprocessing(self, train_df=None, val_df=None, test_df=None, target_size=(2000, 912), batch_size=32,
                      testing=False):
        """
        Preprocess the image using ImageDataGenerator. Only does random flips and random crops right now
        to reflect the BarkNet 1.0 paper. (Could be updated later.)

        :param
            df (DataFrame) : DataFrame to load the batches of images from.

            target_size (tuple of ints): Size to make all of the images in the batch.

            batch_size (int): Size of the batches of images.

        :return:
            cropped_train_batches (Iter Object): An iterator which supplies the batches of images for the model.
        """

        datagen = keras.preprocessing.image.ImageDataGenerator(horizontal_flip=True,
                                                               rescale=1./255)

        if testing:

            test_batches = datagen.flow_from_dataframe(test_df, directory=self.path, x_col='val_imgs',
                                                        y_col='val_labels', target_size=target_size,
                                                        batch_size=batch_size)

            cropped_test_batches = BarkPreprocessing.crop_generator(test_batches, 224)

            return cropped_test_batches

        else:

            # target size is half of the image size based on the pictures from the OnePlus 7.
            train_batches = datagen.flow_from_dataframe(train_df, directory=self.path, x_col='train_imgs',
                                                        y_col='train_labels', target_size=target_size,
                                                        batch_size=batch_size)

            cropped_train_batches = BarkPreprocessing.crop_generator(train_batches, 224)

            val_batches = datagen.flow_from_dataframe(val_df, directory=self.path, x_col='val_imgs', y_col='val_labels',
                                                      target_size=target_size, batch_size=batch_size)

            cropped_val_batches = BarkPreprocessing.crop_generator(val_batches, 224)

            return cropped_train_batches, cropped_val_batches




